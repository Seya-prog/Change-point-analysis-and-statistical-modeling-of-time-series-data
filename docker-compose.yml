version: '3.8'

services:
  # Flask + React Dashboard Application
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "80:80"
      - "3000:80"
      - "5000:5000"
    environment:
      - PYTHONPATH=/app
      - FLASK_ENV=production
      - FLASK_APP=backend/app.py
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health", "&&", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  # PostgreSQL for data storage
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: brent_oil_analysis
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - app-network

  # Jupyter Lab for development
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-token}
    volumes:
      - .:/app
      - jupyter_data:/home/jovyan/.jupyter
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    profiles:
      - dev

  # MLflow for model tracking
  mlflow:
    image: python:3.9-slim
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server --host 0.0.0.0 --port 5000 
               --backend-store-uri postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/mlflow
               --default-artifact-root ./mlruns"
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlruns
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - ml

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  jupyter_data:
  mlflow_data:

networks:
  app-network:
    driver: bridge
