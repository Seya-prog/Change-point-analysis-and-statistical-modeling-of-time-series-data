name: Model Training & Validation

on:
  repository_dispatch:
    types: [retrain-models]
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Model type to train'
        required: true
        default: 'bayesian_changepoint'
        type: choice
        options:
        - bayesian_changepoint
        - all_models
      
jobs:
  train-models:
    name: Train Change-Point Models
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    strategy:
      matrix:
        model: [bayesian_changepoint, ruptures_detection]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Setup model training environment
      run: |
        mkdir -p models/artifacts
        mkdir -p models/logs
        
    - name: Train ${{ matrix.model }} model
      env:
        MODEL_TYPE: ${{ matrix.model }}
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      run: |
        python scripts/train_model.py --model-type ${{ matrix.model }}
        
    - name: Validate model performance
      run: |
        python scripts/validate_model.py --model-type ${{ matrix.model }}
        
    - name: Generate model report
      run: |
        python scripts/generate_model_report.py --model-type ${{ matrix.model }}
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4
      with:
        name: model-${{ matrix.model }}-artifacts
        path: |
          models/artifacts/
          models/logs/
          
    - name: Save model to registry
      if: success()
      env:
        MODEL_REGISTRY_URL: ${{ secrets.MODEL_REGISTRY_URL }}
        MODEL_REGISTRY_TOKEN: ${{ secrets.MODEL_REGISTRY_TOKEN }}
      run: |
        python scripts/save_to_registry.py --model-type ${{ matrix.model }}
        
  model-comparison:
    name: Compare Models
    runs-on: ubuntu-latest
    needs: train-models
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        path: models/
        
    - name: Compare model performance
      run: |
        python scripts/compare_models.py
        
    - name: Generate comparison report
      run: |
        python scripts/generate_comparison_report.py
        
    - name: Upload comparison results
      uses: actions/upload-artifact@v4
      with:
        name: model-comparison-report
        path: reports/model_comparison.html
        
  deploy-best-model:
    name: Deploy Best Model
    runs-on: ubuntu-latest
    needs: model-comparison
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download comparison results
      uses: actions/download-artifact@v3
      with:
        name: model-comparison-report
        path: reports/
        
    - name: Deploy best model
      env:
        DEPLOYMENT_URL: ${{ secrets.DEPLOYMENT_URL }}
        DEPLOYMENT_TOKEN: ${{ secrets.DEPLOYMENT_TOKEN }}
      run: |
        python scripts/deploy_model.py --best-model
